name: security scan
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GIT_TAG: ${{ github.sha }}

jobs:
  
  codeql:
    name: codeql
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'java' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: build
      - run: mkdir codeql
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          output: ./codeql
          upload: false
      - run: |
          cat ./codeql/java.sarif
      - name: Publish report to defectdojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          engagement: ${{ secrets.ENGAGEMENT }}
          product_name: ${{ secrets.PRODUCT_NAME }}
          file: ./codeql/java.sarif
          scan_type: SARIF
          test_title: Codeql Scan
          active: true
          verified: false
          tags: codeql
          skip_duplicates: true
          close_old_findings: true
          branch_tag: main
          build_id: ${{ github.run_id }}
          commit_hash: ${{ github.sha }}
      - name: Show response of defectdojo
        run: |
          echo ${{ steps.import-scan.outputs.response }}
  
  snyk-scan:
    name: snyk-scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/gradle@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          json: true
      - name: show snyk.json
        run: |
          cat snyk.json
      - name: Publish report to defectdojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          engagement: ${{ secrets.ENGAGEMENT }}
          product_name: ${{ secrets.PRODUCT_NAME }}
          file: snyk.json
          scan_type: Snyk Scan
          test_title: Snyk Scan
          active: true
          verified: false
          tags: snyk
          skip_duplicates: true
          close_old_findings: true
          push_to_jira: false
          branch_tag: ${{ github.base_ref }}
          build_id: ${{ github.run_id }}
          commit_hash: ${{ github.sha }}
      - name: Show response of defectdojo
        run: |
          set -e
          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
  
  xray-scan:
    name: xray-scan
    runs-on: ubuntu-latest
    env:
      GENERATE_REPORT_ID:
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@4137be6a8bf7d7133955359dbd952c0ca73b1021
        with:
          arguments: build
      - name: Build Image
        run: |-
          pwd
          ls -al
          docker build  --tag "java_demo:${{ env.GIT_TAG }}" .
          # docker tag "java_demo:${{ env.GIT_TAG }}" java_demo:1.0
        shell: bash

      - uses: jfrog/setup-jfrog-cli@v3.3.0
        env:
          # JFrog platform url (for example: https://acme.jfrog.io) 
          JF_URL: ${{ secrets.JF_URL }}
          
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      - name: login jfrog and tag images and push
        run: | 
          
          docker login -u929574375@qq.com -p ${{ secrets.JF_ACCESS_TOKEN }} zhukangxin.jfrog.io 

          docker tag "java_demo:${{ env.GIT_TAG }}" zhukangxin.jfrog.io/docker-local/java_demo:${{ env.GIT_TAG }}

          docker push zhukangxin.jfrog.io/docker-local/java_demo:${{ env.GIT_TAG }}

      - name: Generate Jfrog xray export
        id: generate-report
        run: | 
          
          curl --location 'https://zhukangxin.jfrog.io/xray/api/v1/reports/vulnerabilities?projectKey=test' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --header 'Content-Type: application/json' \
               --data '{
                 "name": "${{ github.sha }}",
                 "resources": {
                   "repositories": [
                     {
                       "name": "docker-local"
                     },
                     {
                       "name": "test-libs-release-local"
                     },
                     {
                       "name": "test-libs-release-snapshot"
                     }
                   ]
                 }
               }' > xray-report-status.json

      - name: Extract all keywords from xray-report-status.json
        uses: sergeysova/jq-action@v2
        id: keywords
        with:
          cmd: jq '.report_id' xray-report-status.json

      - name: Sleep for 10 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '10s'
            
      - name: Parse report ID
        run: | 
          
          echo "GENERATE_REPORT_ID=${{ steps.keywords.outputs.value }}" >> $GITHUB_ENV

      - name: Export JFrog xray scan report  
        run: | 

          curl --location 'https://zhukangxin.jfrog.io/xray/api/v1/reports/export/${{ env.GENERATE_REPORT_ID }}?file_name=${{ github.sha }}&format=json&projectKey=test' \
               --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
               --header 'Accept-Encoding: deflate/gzip' > ${{ github.sha }}.zip
          
          unzip ${{ github.sha }}.zip 

      - name: Publish report to defectdojo
        id: import-scan
        uses: ivanamat/defectdojo-import-scan@v1
        with:
          token: ${{ secrets.DEFECTOJO_TOKEN }}
          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
          engagement: ${{ secrets.ENGAGEMENT }}
          product_name: ${{ secrets.PRODUCT_NAME }}
          file: ${{ github.sha }}.json
          scan_type: JFrog Xray Unified Scan
          test_title: JFrog Xray Scan
          active: true
          verified: false
          tags: JFrog Xray
          skip_duplicates: true
          close_old_findings: true
          push_to_jira: false
          branch_tag: ${{ github.base_ref }}
          build_id: ${{ github.run_id }}
          commit_hash: ${{ github.sha }}

      - name: Show response of defectdojo
        run: |
          echo ${{ steps.import-scan.outputs.response }}

#  hawkscan_defectdojo:
#    name: hawkscan_defectdojo
#    runs-on: ubuntu-latest
#    steps:
#      - name: Make Request
#        id: myRequest
#        uses: fjogeleit/http-request-action@v1
#        with:
#          url: "https://api.stackhawk.com/api/v1/scan/e3e27165-aea8-41e9-ad55-75970e1fa2be?pageSize=100&sortField=id&sortDir=desc"
#          bearerToken: ${{ secrets.HAWKSCAN_TEM_TOKEN }}
#          method: GET
#      - name: Save repo
#        run: |
#          echo '${{ steps.myRequest.outputs.response }}' >> hawkscan.json
#      - name: Publish report to defectdojo
#        id: import-scan
#        uses: ivanamat/defectdojo-import-scan@v1
#        with:
#          token: ${{ secrets.DEFECTOJO_TOKEN }}
#          defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
#          engagement: ${{ secrets.ENGAGEMENT }}
#          product_name: ${{ secrets.PRODUCT_NAME }}
#          file: hawkscan.json
#          scan_type: StackHawk HawkScan
#          test_title: StackHawk HawkScan
#          tags: hawkscan
#          skip_duplicates: true
#          close_old_findings: true
#          branch_tag: ${{ github.base_ref }}
#          build_id: ${{ github.run_id }}
#          commit_hash: ${{ github.sha }}
#      - name: Show response of defectdojo
#        run: |
#          set -e
#          printf '%s\n' '${{ steps.import-scan.outputs.response }}'
  
  # hawkscan:
  #   name: hawk-scan
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Sync ArgoCD Application
  #       uses: omegion/argocd-actions@v0.2.0
  #       with:
  #         address: "argocd.ngrok.buildsecurity.in"
  #         token: ${{ secrets.ARGOCD_TOKEN }}
  #         appName: "java-demo-dev"
  #     - name: Sleep for 30s
  #       uses: juliangruber/sleep-action@v1
  #       with:
  #         time: 30s
  #     - name: Clone repo
  #       uses: actions/checkout@v2
  #     - name: Run HawkScan
  #       uses: stackhawk/hawkscan-action@v2.0.0
  #       with:
  #         apiKey: ${{ secrets.HAWKSCAN_TOKEN }}
