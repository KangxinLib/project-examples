name: security scan
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GIT_TAG: ${{ github.sha }}

jobs:
  xray-scan:
    name: xray-scan
    runs-on: ubuntu-latest
    env:
      GENERATE_REPORT_ID:
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Maven Verify
        run: mvn -B clean verify
      
      - name: Build project with Maven
        run: mvn -B package --file pom.xml
     
     
      # - name: Build Image
      #   run: |-
      #     pwd
      #     ls -al
      #     docker build  --tag "java_demo:${{ env.GIT_TAG }}" .
      #     # docker tag "java_demo:${{ env.GIT_TAG }}" java_demo:1.0
      #   shell: bash

      # - uses: jfrog/setup-jfrog-cli@v3.3.0
      #   env:
      #     # JFrog platform url (for example: https://acme.jfrog.io) 
      #     JF_URL: ${{ secrets.JF_URL }}
          
      #     JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}

      # - name: login jfrog and tag images and push
      #   run: | 
          
      #     docker login -u929574375@qq.com -p ${{ secrets.JF_ACCESS_TOKEN }} zhukangxin.jfrog.io 

      #     docker tag "java_demo:${{ env.GIT_TAG }}" zhukangxin.jfrog.io/docker-local/java_demo:${{ env.GIT_TAG }}

      #     docker push zhukangxin.jfrog.io/docker-local/java_demo:${{ env.GIT_TAG }}

      # - name: Generate Jfrog xray export
      #   id: generate-report
      #   run: | 
          
      #     curl --location 'https://zhukangxin.jfrog.io/xray/api/v1/reports/vulnerabilities?projectKey=test' \
      #          --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
      #          --header 'Content-Type: application/json' \
      #          --data '{
      #            "name": "${{ github.sha }}",
      #            "resources": {
      #              "repositories": [
      #                {
      #                  "name": "docker-local"
      #                },
      #                {
      #                  "name": "test-libs-release-local"
      #                },
      #                {
      #                  "name": "test-libs-release-snapshot"
      #                }
      #              ]
      #            }
      #          }' > xray-report-status.json

      # - name: Extract all keywords from xray-report-status.json
      #   uses: sergeysova/jq-action@v2
      #   id: keywords
      #   with:
      #     cmd: jq '.report_id' xray-report-status.json

      # - name: Sleep for 10 seconds
      #   uses: jakejarvis/wait-action@master
      #   with:
      #     time: '10s'
            
      # - name: Parse report ID
      #   run: | 
          
      #     echo "GENERATE_REPORT_ID=${{ steps.keywords.outputs.value }}" >> $GITHUB_ENV

      # - name: Export JFrog xray scan report  
      #   run: | 

      #     curl --location 'https://zhukangxin.jfrog.io/xray/api/v1/reports/export/${{ env.GENERATE_REPORT_ID }}?file_name=${{ github.sha }}&format=json&projectKey=test' \
      #          --header 'Authorization: Bearer ${{ secrets.JF_ACCESS_TOKEN }}' \
      #          --header 'Accept-Encoding: deflate/gzip' > ${{ github.sha }}.zip
          
      #     unzip ${{ github.sha }}.zip 

      # - name: Publish report to defectdojo
      #   id: import-scan
      #   uses: ivanamat/defectdojo-import-scan@v1
      #   with:
      #     token: ${{ secrets.DEFECTOJO_TOKEN }}
      #     defectdojo_url: ${{ secrets.DEFECTOJO_URL }}
      #     engagement: ${{ secrets.ENGAGEMENT }}
      #     product_name: ${{ secrets.PRODUCT_NAME }}
      #     file: ${{ github.sha }}.json
      #     scan_type: JFrog Xray Unified Scan
      #     test_title: JFrog Xray Scan
      #     active: true
      #     verified: false
      #     tags: JFrog Xray
      #     skip_duplicates: true
      #     close_old_findings: true
      #     push_to_jira: false
      #     branch_tag: ${{ github.base_ref }}
      #     build_id: ${{ github.run_id }}
      #     commit_hash: ${{ github.sha }}

      # - name: Show response of defectdojo
      #   run: |
      #     echo ${{ steps.import-scan.outputs.response }}

